# visualize_grid_search.py (Example Structure)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D # For 3D plots
import seaborn as sns

# --- Configuration ---
#RESULTS_FILE = 'stage2_grid_search_WH_results.csv' # File generated by the grid search
RESULTS_FILE = 'stage2_grid_search_WH_results.csv'
METRIC_TO_PLOT = 'F1_Macro_S2' # Which metric to visualize
#METRIC_TO_PLOT = 'ROC_AUC'
#W_COL = 'W_Hours_S2'
#H_COL = 'H_Hours_S2'
W_COL = 'W_Hours_S2'
H_COL = 'H_Hours_S2'

# --- Main Visualization ---
if __name__ == "__main__":
    print(f"--- Visualizing Grid Search Results from {RESULTS_FILE} ---")

    # 1. Load Results
    try:
        results_df = pd.read_csv(RESULTS_FILE)
        results_df = results_df.drop_duplicates(keep='first')

        print(f"Loaded {len(results_df)} results.")
        # Drop rows where metric might be invalid (e.g., -1 if run failed)
        results_df = results_df[results_df[METRIC_TO_PLOT] >= 0].copy()
        if results_df.empty:
             raise ValueError("No valid results found in the CSV file.")
             
    except FileNotFoundError:
        print(f"Error: Results file '{RESULTS_FILE}' not found.")
        exit()
    except Exception as e:
        print(f"Error loading or processing results file: {e}")
        exit()

    # 2. Prepare Data for Plotting
    try:
        pivot_df = results_df.pivot(index=W_COL, columns=H_COL, values=METRIC_TO_PLOT)
        print("\nPivot Table for Plotting:")
        print(pivot_df)
        
        # Get X (H values), Y (W values), Z (Metric values) for 3D plot
        H_values = pivot_df.columns.values
        W_values = pivot_df.index.values
        X_grid, Y_grid = np.meshgrid(H_values, W_values)
        Z_grid = pivot_df.values

    except Exception as e:
        print(f"Error creating pivot table. Ensure CSV has columns '{W_COL}', '{H_COL}', '{METRIC_TO_PLOT}': {e}")
        exit()
        
    # --- 3. Generate 3D Surface/Wireframe Plot ---
    print("\nGenerating 3D Plot...")
    try:
        fig3d = plt.figure(figsize=(12, 8))
        ax3d = fig3d.add_subplot(111, projection='3d')
        
        # Choose surface or wireframe
        surf = ax3d.plot_surface(X_grid, Y_grid, Z_grid, cmap='YlOrRd', edgecolor='none', rstride=1, cstride=1, alpha=0.8)
        # wire = ax3d.plot_wireframe(X_grid, Y_grid, Z_grid, color='grey', rstride=1, cstride=1, alpha=0.7)

        ax3d.set_xlabel(f'Horizon H2 ({H_COL})')
        ax3d.set_ylabel(f'Window W2 ({W_COL})')
        ax3d.set_zlabel(f'Metric ({METRIC_TO_PLOT})')
        ax3d.set_title(f'Grid Search Results: {METRIC_TO_PLOT} vs. W2 and H2')
        fig3d.colorbar(surf, shrink=0.5, aspect=5) # Add color bar if using plot_surface
        ax3d.view_init(elev=30, azim=120) # Adjust view angle
        plt.tight_layout()
        plt.show()
    except Exception as e:
         print(f"Error generating 3D plot: {e}")

    # --- 4. Generate Heatmap ---
    print("\nGenerating Heatmap...")
    try:
        plt.figure(figsize=(10, 8))
        sns.heatmap(pivot_df, annot=True, fmt=".4f", cmap="OrRd", linewidths=.5)  # cmap="viridis"
        plt.xlabel(f'Horizon H2 ({H_COL})')
        plt.ylabel(f'Window W2 ({W_COL})')
        plt.title(f'Grid Search Heatmap: {METRIC_TO_PLOT}')
        plt.yticks(rotation=0) 
        plt.show()
    except Exception as e:
         print(f"Error generating heatmap: {e}")

    print("\n--- Visualization Finished ---")